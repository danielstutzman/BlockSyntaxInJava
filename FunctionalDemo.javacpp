import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;

public final class FunctionalDemo {  
  public static void main(final String[] args) {  
    List<Integer> positiveInts = Arrays.asList(new Integer[] { 1, 2, 3 });
    System.out.println(positiveInts);
    List<Integer> negativeInts =
      MAP_LO_LO(positiveInts, Integer, Integer, { return -_; });
    System.out.println(negativeInts);

    int[] list = new int[] { 1, 2, 3};
    int[] list2 = MAP_AI_AI(list, {
      return _ + 42;
    });
    String[] strings = MAP_AI_AO(list, String, {
      return _ + "42";
    });
    Integer[] ints = MAP_AO_AO(strings, String, Integer, {
      return Integer.parseInt(_);
    });
    FOREACH_AO(ints, Integer, {
      System.out.println("here2" + _);
    });

    List<Integer> intList = Arrays.asList(new Integer[] { 3, 5, 7 });
    FOREACH_LO(intList, Integer, {
      System.out.println("here2" + _);
    });
    FOREACH_IO(intList, Integer, {
      System.out.println("here3" + _);
    });
    FOREACH_AI(list, {
      System.out.println("here" + _);
    });
    vectorExample();
  }

  // Example of old-school code before generics
  @SuppressWarnings({"unchecked"})
  private static void vectorExample() {
    Vector vector = new Vector();
    vector.add(new Integer(3));
    vector.add(new Integer(5));
    vector.add(new Integer(7));
    FOREACH_EO(vector.elements(), Integer, {
      System.out.println("here5 " + _);
    });
  }  
}  

